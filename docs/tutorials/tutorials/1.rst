Task: Question Answering for Game of Thrones
============================================

Question Answering can be used in a variety of use cases. A very common
one: Using it to navigate through complex knowledge bases or long
documents (“search setting”).

A “knowledge base” could for example be your website, an internal wiki
or a collection of financial reports. In this tutorial we will work on a
slightly different domain: “Game of Thrones”.

Let’s see how we can use a bunch of Wikipedia articles to answer a
variety of questions about the marvellous seven kingdoms…

*Use
this*\ `link <https://colab.research.google.com/github/deepset-ai/haystack/blob/master/tutorials/Tutorial1_Basic_QA_Pipeline.ipynb>`__\ *to
open the notebook in Google Colab.*

.. code:: ipython3

    ! pip install git+https://github.com/deepset-ai/haystack.git
    #! pip install farm-haystack

.. code:: ipython3

    from haystack import Finder
    from haystack.indexing.cleaning import clean_wiki_text
    from haystack.indexing.utils import convert_files_to_dicts, fetch_archive_from_http
    from haystack.reader.farm import FARMReader
    from haystack.reader.transformers import TransformersReader
    from haystack.utils import print_answers

Document Store
--------------

Haystack finds answers to queries within the documents stored in a
``DocumentStore``. The current implementations of ``DocumentStore``
include ``ElasticsearchDocumentStore``, ``SQLDocumentStore``, and
``InMemoryDocumentStore``.

**Here:** We recommended Elasticsearch as it comes preloaded with
features like `full-text
queries <https://www.elastic.co/guide/en/elasticsearch/reference/current/full-text-queries.html>`__,
`BM25
retrieval <https://www.elastic.co/elasticon/conf/2016/sf/improved-text-scoring-with-bm25>`__,
and `vector storage for text
embeddings <https://www.elastic.co/guide/en/elasticsearch/reference/7.6/dense-vector.html>`__.

**Alternatives:** If you are unable to setup an Elasticsearch instance,
then follow the `Tutorial
3 <https://github.com/deepset-ai/haystack/blob/master/tutorials/Tutorial3_Basic_QA_Pipeline_without_Elasticsearch.ipynb>`__
for using SQL/InMemory document stores.

**Hint**: This tutorial creates a new document store instance with
Wikipedia articles on Game of Thrones. However, you can configure
Haystack to work with your existing document stores.

Start an Elasticsearch server
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can start Elasticsearch on your local machine instance using Docker.
If Docker is not readily available in your environment (eg., in Colab
notebooks), then you can manually download and execute Elasticsearch
from source.

.. code:: ipython3

    # Recommended: Start Elasticsearch using Docker
    #! docker run -d -p 9200:9200 -e "discovery.type=single-node" elasticsearch:7.6.2


.. parsed-literal::

    0ae423cd9c30d6f02ca2073e430d4e1f4403d88b8ec316411ec4c198bad3d416


.. code:: ipython3

    # In Colab / No Docker environments: Start Elasticsearch from source
    ! wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.6.2-linux-x86_64.tar.gz -q
    ! tar -xzf elasticsearch-7.6.2-linux-x86_64.tar.gz
    ! chown -R daemon:daemon elasticsearch-7.6.2
    
    import os
    from subprocess import Popen, PIPE, STDOUT
    es_server = Popen(['elasticsearch-7.6.2/bin/elasticsearch'],
                       stdout=PIPE, stderr=STDOUT,
                       preexec_fn=lambda: os.setuid(1)  # as daemon
                      )
    # wait until ES has started
    ! sleep 30

.. code:: ipython3

    # Connect to Elasticsearch
    
    from haystack.database.elasticsearch import ElasticsearchDocumentStore
    document_store = ElasticsearchDocumentStore(host="localhost", username="", password="", index="document")


.. parsed-literal::

    07/07/2020 10:41:47 - INFO - elasticsearch -   PUT http://localhost:9200/document [status:200 request:0.364s]


Cleaning & indexing documents
-----------------------------

Haystack provides a customizable cleaning and indexing pipeline for
ingesting documents in Document Stores.

In this tutorial, we download Wikipedia articles on Game of Thrones,
apply a basic cleaning function, and index them in Elasticsearch.

.. code:: ipython3

    # Let's first get some documents that we want to query
    # Here: 517 Wikipedia articles for Game of Thrones
    doc_dir = "data/article_txt_got"
    s3_url = "https://s3.eu-central-1.amazonaws.com/deepset.ai-farm-qa/datasets/documents/wiki_gameofthrones_txt.zip"
    fetch_archive_from_http(url=s3_url, output_dir=doc_dir)
    
    # Convert files to dicts
    # You can optionally supply a cleaning function that is applied to each doc (e.g. to remove footers)
    # It must take a str as input, and return a str.
    dicts = convert_files_to_dicts(dir_path=doc_dir, clean_func=clean_wiki_text, split_paragraphs=True)
    
    # We now have a list of dictionaries that we can write to our document store.
    # If your texts come from a different source (e.g. a DB), you can of course skip convert_files_to_dicts() and create the dictionaries yourself.
    # The default format here is: {"name": "<some-document-name>, "text": "<the-actual-text>"}
    # (Optionally: you can also add more key-value-pairs here, that will be indexed as fields in Elasticsearch and
    # can be accessed later for filtering or shown in the responses of the Finder)
    
    # Let's have a look at the first 3 entries:
    print(dicts[:3])
    
    # Now, let's write the dicts containing documents to our DB.
    document_store.write_documents(dicts)


.. parsed-literal::

    07/07/2020 10:41:48 - INFO - haystack.indexing.utils -   Found data stored in `data/article_txt_got`. Delete this first if you really want to fetch new data.
    07/07/2020 10:41:48 - INFO - elasticsearch -   POST http://localhost:9200/_bulk [status:200 request:0.461s]
    07/07/2020 10:41:49 - INFO - elasticsearch -   POST http://localhost:9200/_bulk [status:200 request:0.259s]
    07/07/2020 10:41:49 - INFO - elasticsearch -   POST http://localhost:9200/_bulk [status:200 request:0.205s]
    07/07/2020 10:41:49 - INFO - elasticsearch -   POST http://localhost:9200/_bulk [status:200 request:0.158s]
    07/07/2020 10:41:49 - INFO - elasticsearch -   POST http://localhost:9200/_bulk [status:200 request:0.126s]
    07/07/2020 10:41:49 - INFO - elasticsearch -   POST http://localhost:9200/_bulk [status:200 request:0.095s]


.. parsed-literal::

    [{'name': '384_Maelor_Targaryen.txt', 'text': '#REDIRECT The Princess and the Queen'}, {'name': '314_Pypar.txt', 'text': "#REDIRECT List of Game of Thrones characters#Night's Watch"}, {'name': '73_A_Man_Without_Honor.txt', 'text': '"\'\'\'A Man Without Honor\'\'\'" is the seventh episode of the second season of HBO\'s medieval fantasy television series \'\'Game of Thrones\'\'.\nThe episode is written by series co-creators David Benioff and D. B. Weiss and directed, for the second time in this season, by David Nutter. It premiered on May 13, 2012.\nThe name of the episode comes from Catelyn Stark\'s assessment of Ser Jaime Lannister: "You are a man without honor," after he kills a member of his own family to attempt escape.'}]


Initalize Retriever, Reader, & Finder
-------------------------------------

Retriever
~~~~~~~~~

Retrievers help narrowing down the scope for the Reader to smaller units
of text where a given question could be answered. They use some simple
but fast algorithm.

**Here:** We use Elasticsearch’s default BM25 algorithm

**Alternatives:**

-  Customize the ``ElasticsearchRetriever``\ with custom queries
   (e.g. boosting) and filters
-  Use ``TfidfRetriever`` in combination with a SQL or InMemory Document
   store for simple prototyping and debugging
-  Use ``EmbeddingRetriever`` to find candidate documents based on the
   similarity of embeddings (e.g. created via Sentence-BERT)
-  Use ``DensePassageRetriever`` to use different embedding models for
   passage and query (see Tutorial 6)

.. code:: ipython3

    from haystack.retriever.sparse import ElasticsearchRetriever
    retriever = ElasticsearchRetriever(document_store=document_store)

.. code:: ipython3

    # Alternative: An in-memory TfidfRetriever based on Pandas dataframes for building quick-prototypes with SQLite document store.
    
    # from haystack.retriever.sparse import TfidfRetriever
    # retriever = TfidfRetriever(document_store=document_store)

Reader
~~~~~~

A Reader scans the texts returned by retrievers in detail and extracts
the k best answers. They are based on powerful, but slower deep learning
models.

Haystack currently supports Readers based on the frameworks FARM and
Transformers. With both you can either load a local model or one from
Hugging Face’s model hub (https://huggingface.co/models).

**Here:** a medium sized RoBERTa QA model using a Reader based on FARM
(https://huggingface.co/deepset/roberta-base-squad2)

**Alternatives (Reader):** TransformersReader (leveraging the
``pipeline`` of the Transformers package)

**Alternatives (Models):**
e.g. “distilbert-base-uncased-distilled-squad” (fast) or
“deepset/bert-large-uncased-whole-word-masking-squad2” (good accuracy)

**Hint:** You can adjust the model to return “no answer possible” with
the no_ans_boost. Higher values mean the model prefers “no answer
possible”

FARMReader
^^^^^^^^^^

.. code:: ipython3

    # Load a  local model or any of the QA models on
    # Hugging Face's model hub (https://huggingface.co/models)
    
    reader = FARMReader(model_name_or_path="deepset/roberta-base-squad2", use_gpu=False)


.. parsed-literal::

    04/28/2020 12:29:45 - INFO - farm.utils -   device: cpu n_gpu: 0, distributed training: False, automatic mixed precision training: None
    04/28/2020 12:29:45 - INFO - farm.infer -   Could not find `deepset/roberta-base-squad2` locally. Try to download from model hub ...
    04/28/2020 12:29:49 - WARNING - farm.modeling.language_model -   Could not automatically detect from language model name what language it is. 
    	 We guess it's an *ENGLISH* model ... 
    	 If not: Init the language model by supplying the 'language' param.
    04/28/2020 12:29:54 - WARNING - farm.modeling.prediction_head -   Some unused parameters are passed to the QuestionAnsweringHead. Might not be a problem. Params: {"loss_ignore_index": -1}
    04/28/2020 12:29:58 - INFO - farm.utils -   device: cpu n_gpu: 0, distributed training: False, automatic mixed precision training: None


TransformersReader
^^^^^^^^^^^^^^^^^^

.. code:: ipython3

    # Alternative:
    # reader = TransformersReader(model="distilbert-base-uncased-distilled-squad", tokenizer="distilbert-base-uncased", use_gpu=-1)

Finder
~~~~~~

The Finder sticks together reader and retriever in a pipeline to answer
our actual questions.

.. code:: ipython3

    finder = Finder(reader, retriever)

Voilà! Ask a question!
----------------------

.. code:: ipython3

    # You can configure how many candidates the reader and retriever shall return
    # The higher top_k_retriever, the better (but also the slower) your answers. 
    prediction = finder.get_answers(question="Who is the father of Arya Stark?", top_k_retriever=10, top_k_reader=5)


.. parsed-literal::

    04/28/2020 12:27:53 - INFO - elasticsearch -   GET http://localhost:9200/document/_search [status:200 request:0.113s]
    04/28/2020 12:27:53 - INFO - haystack.retriever.elasticsearch -   Got 10 candidates from retriever
    04/28/2020 12:27:53 - INFO - haystack.finder -   Reader is looking for detailed answer in 362347 chars ...


.. code:: ipython3

    # prediction = finder.get_answers(question="Who created the Dothraki vocabulary?", top_k_reader=5)
    # prediction = finder.get_answers(question="Who is the sister of Sansa?", top_k_reader=5)

.. code:: ipython3

    print_answers(prediction, details="minimal")


.. parsed-literal::

    [   {   'answer': 'Eddard',
            'context': 's Nymeria after a legendary warrior queen. She travels '
                       "with her father, Eddard, to King's Landing when he is made "
                       'Hand of the King. Before she leaves,'},
        {   'answer': 'Ned',
            'context': 'girl disguised as a boy all along and is surprised to '
                       "learn she is Arya, Ned Stark's daughter. After the "
                       'Goldcloaks get help from Ser Amory Lorch and '},
        {   'answer': 'Ned',
            'context': 'in the television series.\n'
                       '\n'
                       '\n'
                       '====Season 1====\n'
                       'Arya accompanies her father Ned and her sister Sansa to '
                       "King's Landing. Before their departure, Arya's ha"},
        {   'answer': 'Balon Greyjoy',
            'context': 'He sends Theon to the Iron Islands hoping to broker an '
                       "alliance with Balon Greyjoy, Theon's father. In exchange "
                       'for Greyjoy support, Robb as the King '},
        {   'answer': 'Brynden Tully',
            'context': 'o the weather. Sandor decides to instead take her to her '
                       'great-uncle Brynden Tully. On their way to Riverrun, they '
                       "encounter two men on Arya's death l"}]

