Fine-tuning a model on your own data
====================================

For many use cases it is sufficient to just use one of the existing
public models that were trained on SQuAD or other public QA datasets
(e.g. ). However, if you have domain-specific questions, fine-tuning
your model on custom examples will very likely boost your performance.
While this varies by domain, we saw that ~ 2000 examples can easily
increase performance by +5-20%.

This tutorial shows you how to fine-tune a pretrained model on your own
dataset.

.. code:: ipython3

    ! pip install git+https://github.com/deepset-ai/haystack.git

.. code:: ipython3

    from haystack.reader.farm import FARMReader

Create Training Data
--------------------

There are two ways to generate training data

1. **Annotation**: You can use the `annotation
   tool <https://github.com/deepset-ai/haystack#labeling-tool>`__ to
   label your data, i.e. highlighting answers to your questions in a
   document. The tool supports structuring your workflow with
   organizations, projects, and users. The labels can be exported in
   SQuAD format that is compatible for training with Haystack.

.. figure:: https://raw.githubusercontent.com/deepset-ai/haystack/master/docs/img/annotation_tool.png
   :alt: alt text

   alt text

2. **Feedback**: For production systems, you can collect training data
   from direct user feedback via Haystack’s `REST API
   interface <https://github.com/deepset-ai/haystack#rest-api>`__. This
   includes a customizable user feedback API for providing feedback on
   the answer returned by the API. The API provides feedback export
   endpoint to obtain the feedback data for fine-tuning your model
   further.

Fine-tune your model
--------------------

Once you have collected training data, you can fine-tune your base
models. We initialize a reader as a base model and fine-tune it on our
own custom dataset (should be in SQuAD-like format). We recommend using
a base model that was trained on SQuAD or a similar QA dataset before to
benefit from Transfer Learning effects.

\**Recommendation: Run training on a GPU. If you are using Colab: Enable
this in the menu “Runtime” > “Change Runtime type” > Select “GPU” in
dropdown. Then change the ``use_gpu`` arguments below to ``True``

.. code:: ipython3

    reader = FARMReader(model_name_or_path="distilbert-base-uncased-distilled-squad", use_gpu=True)
    train_data = "data/squad20"
    # train_data = "PATH/TO_YOUR/TRAIN_DATA" 
    reader.train(data_dir=train_data, train_filename="dev-v2.0.json", use_gpu=True, n_epochs=1, save_dir="my_model")


.. parsed-literal::

    04/28/2020 14:39:27 - INFO - farm.utils -   device: cpu n_gpu: 0, distributed training: False, automatic mixed precision training: None
    04/28/2020 14:39:27 - INFO - farm.infer -   Could not find `distilbert-base-uncased-distilled-squad` locally. Try to download from model hub ...
    04/28/2020 14:39:29 - WARNING - farm.modeling.language_model -   Could not automatically detect from language model name what language it is. 
    	 We guess it's an *ENGLISH* model ... 
    	 If not: Init the language model by supplying the 'language' param.
    04/28/2020 14:39:31 - WARNING - farm.modeling.prediction_head -   Some unused parameters are passed to the QuestionAnsweringHead. Might not be a problem. Params: {"loss_ignore_index": -1}
    04/28/2020 14:39:33 - INFO - farm.utils -   device: cpu n_gpu: 0, distributed training: False, automatic mixed precision training: None
    04/28/2020 14:39:33 - INFO - farm.utils -   device: cpu n_gpu: 0, distributed training: False, automatic mixed precision training: None
    Preprocessing Dataset data/squad20/dev-v2.0.json: 100%|██████████| 1204/1204 [00:02<00:00, 402.13 Dicts/s]
    Train epoch 0/1 (Cur. train loss: 0.0000):   0%|          | 0/1213 [00:00<?, ?it/s]

.. code:: ipython3

    # Saving the model happens automatically at the end of training into the `save_dir` you specified
    # However, you could also save a reader manually again via:
    reader.save(directory="my_model")

.. code:: ipython3

    # If you want to load it at a later point, just do:
    new_reader = FARMReader(model_name_or_path="my_model")
